#compdef _gt gt
#
#    __                          __
#   / /____ ___ ____  ___  ___ _/ /       This script is provided to you by https://github.com/tegonal/gt
#  / __/ -_) _ `/ _ \/ _ \/ _ `/ /        Copyright 2022 Tegonal Genossenschaft <info@tegonal.com>
#  \__/\__/\_, /\___/_//_/\_,_/_/         It is licensed under European Union Public License v. 1.2
#         /___/                           Please report bugs and contribute back your improvements
#
#                                         Version: v1.6.0-SNAPSHOT
#######  Description  #############
#
#  Provides a completion function for zsh.
#
#  If you make changes, then either start a new zsh or use `unfunction _gt && autoload -U _gt` to see them immediately.
#
#######  Usage  ###################
function _gt() {
	_tegonal_command_based "gt" true
}

function _gt_pull() {
	local state
	_tegonal_parseargs_based "gt pull" false

	case $state in
		(auto-trust)
			_gt_param_auto_trust_describe
			;;
		(chop-path)
			_describe 'chop-path' "('true:chop the source path, i.e. --path src/gt.sh is pulled as $(printf '\033[0;36m%s\033[0m' 'gt.sh') in the target folder' 'false:keep the source path, i.e. --path src/gt.sh is pulled as $(printf '\033[0;36m%s\033[0m' 'src/gt.sh') in the target folder')"
			;;
		(directory)
			_files
			;;
		(unsecure)
			_describe 'unsecure' "('true:can pull from a remote for which no GPG key(s) are defined' 'false:can only pull from a secure remote for which GPG key(s) are defined')"
			;;
		(unsecure-no-verification)
			_describe 'unsecure-no-verification' "('true:don'\''t verify files even if GPG is defined' 'false:verify files if GPG key is defined for remote')"
			;;
		(remote)
			_gt_describe_remotes
			;;
		(working-directory)
			_files
			;;
	esac
}

function _gt_re_pull() {
	local state
	_tegonal_parseargs_based "gt re-pull" false

	case $state in
		(auto-trust)
			_gt_param_auto_trust_describe
			;;
		(only-missing)
			_describe 'only-missing' "('true:only pull files which do not yet exist locally' 'false:override existing files')"
			;;
		(remote)
			_gt_describe_remotes
			;;
		(working-directory)
			_files
	esac
}

function _gt_remote() {
	_tegonal_command_based "gt remote" false
}

function _gt_remote_add() {
	local state
	_tegonal_parseargs_based "gt remote add" false

	case $state in
		(url)
			_values 'url' "https\://github.com/"
			;;
		(unsecure)
			_describe 'unsecure' "('true:will not require a GPG key and will add --unsecure true to the remotes pull.args so that it doesn'\''t need to be repeated during gt pull' 'false:will fetch the GPG key(s) of the remote defined at .gt/*.asc and verify if we trust them')"
			;;
		(working-directory)
			_files
	esac
}

function _gt_remote_remove() {
	local state
	_tegonal_parseargs_based "gt remote remove" false

	case $state in
		(delete-pulled-files)
			_describe 'delete-pulled-files' "('true:will also try to delete all files specified in pulled.tsv of this remote' 'false:will keep the pulled files and only remove the remote')"
			;;
		(remote)
			_gt_describe_remotes
			;;
		(working-directory)
			_files
	esac
}


function _gt_remote_list(){
	local state
	_tegonal_parseargs_based "gt remote list" false
}

function _gt_reset() {
	local state
	_tegonal_parseargs_based "gt reset" false

	case $state in
		(gpg-only)
			_describe 'gpg-only' "('true:only the gpg key(s) are reset, files are not reset' 'false:gpg key(s) and files are reset (i.e. removed and re-pulled)')"
			;;
		(remote)
			_gt_describe_remotes
			;;
		(working-directory)
			_files
	esac
}

function _gt_update() {
	local state
  _tegonal_parseargs_based "gt update" false

	case $state in
		(gpg-only)
			_describe 'gpg-only' "('true:only the gpg key(s) are reset, files are not reset' 'false:gpg key(s) and files are reset (i.e. removed and re-pulled)')"
			;;
		(remote)
			_gt_describe_remotes
			;;
		(working-directory)
			_files
	esac
}

function _gt_self_update() {
	local state
	_tegonal_parseargs_based "gt self-update" false

	case $state in
		(force)
			_describe 'force' "('true:re-install gt with latest version in any case' 'false:re-install gt only if not already on latest version')"
			;;
	esac
}


# ----------------------------------------------------------------------------------------------------------------------
# helper functions
# ----------------------------------------------------------------------------------------------------------------------

function _tegonal_command_based() {
	local -r command=$1
	local -r showVersion=$2
	shift 2
	local -r suffix="_${command// /_}"

	local -r helpContent="$(eval "$command --help")"

	set -o rematchpcre # otherwise the non-greedy match doesn't work
	local -r commandRegex="Commands:.*\n([\S\s]+?)\n.*INFO"
	if [[ $helpContent =~ $commandRegex ]]; then
		local subCommands
		subCommands=("${(f@)$(echo "$match" | grep '^[a-z]' | sed -r "s/([a-zA-Z0-9_-]+)\s*(.*)/\1:\2/")}")
		subCommands+=(':' "--help:prints the help of $command")
		if [[ $showVersion == "true" ]]; then
			subCommands+=("--version:prints the version of $command")
		fi
		local -r matchesSubCommandRegex="^($(printf "%s\n" "${subCommands[@]}" | awk -F: '{print $1}' | paste -sd '|'))$"

		local state line
		_arguments "1:command:->command" "*::options:->options"
		case $state in
			(command)
					_describe -V1 -t commands "$command subcommands" subCommands
					;;
			(options)

				if [[ "${line[1]}" =~ $matchesSubCommandRegex  ]]; then
					"${suffix}_${line[1]//-/_}"
				fi
		esac
	else
		echo >&2 "could not find commands in the help output, following its output"
		echo "$helpContent"
		return 1
	fi
}

function _tegonal_parseargs_based(){
	local -r command=$1
	local -r showVersion=$2
	shift 2
	local -r suffix="_${command// /_}"

	local -r helpContent="$(eval "$command --help")"
	set -o rematchpcre # otherwise the non-greedy match doesn't work
	local -r parametersRegex="Parameters:.*\n([\S\s]+?)\n.*(Examples:|INFO)"
	if [[ $helpContent =~ $parametersRegex ]]; then

		local -a parameters=()
		local paramsSingle="$(echo "$match" | grep '^--' |  grep -v -E '^--(help|version)' | sed -r "s/--([a-zA-Z0-9_-]+)\s*(.*)/--\1[\2]:\1:->\1/")"
		if [[ -n $paramsSingle ]]; then
			# shellcheck disable=SC2116 # f@ expects a subshell hence the echo is necessary
			parameters+=("${(f@)$(echo "$paramsSingle")}")
		fi

		local paramsWithAlternatives="$(echo "$match" | grep -E '^-[a-zA-Z]+\|' | sed -r "s/-([^|])+\|--([a-zA-Z0-9_-]+)\s*(.*)/+\n(\2)\n-\1[\3]:\2:->\2\n--\2[\3]:\2:->\2/")"
		if [[ -n $paramsWithAlternatives ]]; then
			# shellcheck disable=SC2116 # f@ expects a subshell hence the echo is necessary
			parameters+=("${(f@)$(echo "$paramsWithAlternatives")}")
		fi

		parameters+=("--help[prints the help of $command]")
		if [[ $showVersion == "true" ]]; then
			parameters+=("--version[prints the version of $command]")
		fi
		_arguments "${parameters[@]}"
	else
		echo >&2 "could not find parameters in the help output, following its output"
		echo "$helpContent"
		return 1
	fi
}

function _gt_describe_remotes() {
	local remotes
	#TODO take a chosen working-directory into account
	remotes=$(gt remote list 2> /dev/null) || echo ""
	if [[ -n "$remotes" ]]; then
		_describe 'remotes' "($remotes)"
	else
		local -a notFound=("not-found:.gt directory not found in $(pwd) cannot deduce remotes" \:)
		_describe 'remotes' notFound
		return 1
	fi
}

function _gt_param_auto_trust_describe() {
	_describe 'autoTrust' "('true:if GPG is not set up yet, then all keys in.gt/remotes/<remote>/public-keys/*.asc are imported without manual consent' 'false:if GPG is not set up yet, then importing keys in .gt/remotes/<remote>/public-keys/*.asc requires a manual consent')"
}
